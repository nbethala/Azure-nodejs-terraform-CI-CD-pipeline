name: Deploy to Azure

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  # No need for id-token unless you're using OIDC

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

jobs:
   terraform:
      runs-on: ubuntu-latest
      defaults:
         run:
            working-directory: infra_terraform
      steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.ARM_CLIENT_SECRET }}
          auth-type: SERVICE_PRINCIPAL

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Verify Terraform Auth Variables
        run: |
          echo "ARM_CLIENT_ID=$ARM_CLIENT_ID"
          echo "ARM_TENANT_ID=$ARM_TENANT_ID"
          echo "ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID"

      - name: Terraform Init
        run: terraform init
        
      - name: Import existing resource group if needed
        run: |
           RG_NAME="rg-webapp-deploy"
           RG_ID="/subscriptions/${{ secrets.ARM_SUBSCRIPTION_ID }}/resourceGroups/$RG_NAME"
           terraform state list | grep "azurerm_resource_group.webapp_rg" || terraform import azurerm_resource_group.webapp_rg $RG_ID

      - name: Terraform Plan
        run: terraform plan
        
      - name: Terraform Apply
        run: terraform apply -auto-approve
        
   deploy:
         runs-on: ubuntu-latest
         needs: terraform
         env:
           ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
           ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
           ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
           ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
         steps:
           - name: Azure Login
             uses: azure/login@v1
             with:
               client-id: ${{ secrets.ARM_CLIENT_ID }}
               tenant-id: ${{ secrets.ARM_TENANT_ID }}
               subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
               client-secret: ${{ secrets.ARM_CLIENT_SECRET }}
               auth-type: SERVICE_PRINCIPAL

           - name: Debug Azure Env Vars
             run: |
              echo "ARM_CLIENT_ID=$ARM_CLIENT_ID"
              echo "ARM_TENANT_ID=$ARM_TENANT_ID"
              echo "ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID"
             
           - name: Debug Secrets
             run: |
              echo "Client Secret Length: ${#${{ secrets.ARM_CLIENT_SECRET }}}"

           - name: Checkout code
             uses: actions/checkout@v3

           - name: Log in to ACR
             run: echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ secrets.ACR_NAME }}.azurecr.io -u ${{ secrets.ACR_USERNAME }} --password-stdin

           - name: Build and Push Docker Image
             run: |
              docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/webapp:latest ./web-app
              docker push ${{ secrets.ACR_NAME }}.azurecr.io/webapp:latest

           - name: Deploy to Azure Web App
             run: |
              az webapp config container set \
               --name ${{ secrets.WEBAPP_NAME }} \
               --resource-group ${{ secrets.RESOURCE_GROUP }} \
               --docker-custom-image-name ${{ secrets.ACR_NAME }}.azurecr.io/webapp:latest \
               --docker-registry-server-url https://${{ secrets.ACR_NAME }}.azurecr.io \
               --docker-registry-server-user ${{ secrets.ACR_USERNAME }} \
               --docker-registry-server-password ${{ secrets.ACR_PASSWORD }}

           -  name: Deployment Success
              run: |
                echo "âœ… Web app deployed: https://${{ secrets.WEBAPP_NAME }}.azurewebsites.net"
